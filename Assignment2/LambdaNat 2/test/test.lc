testing_arithmetic ;;
0+1 ;;           // 1
(\x.x)1+1 ;;     // 2
1+2+(\x.x);;     // 3 + (\ x . x)
(\x.x)+4+1;;     // (\ x . x) + 4 + 1

testing_conditionals ;;
if 0=0 then 0 else false ;;                     // 0
if x=0 then 0 else false ;;                     // false 
(\x. if x=0 then 0 else false) 0 ;;             // 0
(\x. if y=y then (\z.z)x else false) 0 ;;       // 0
(\x. if y=z then true else (\z.z) x) 0 ;;       // 0

/*

make your own test cases

*/

// addition
((\x.\y.x+y) 2) 3 ;; // Should output 5

// multiplication
(\x.\y.x*y) 4 5 ;;   // Should output 20

// exponentiation
(\x.\y.x^Y) 2 3 ;;   // Should output 8

// recursive
let rec fact = \x.if x=0 then 1 else x*fact(x-1) in fact 5 ;; // Should output 120

//function compositions
(\f.f 3) (\x.x+1) ;;  // Should output 4

// list operatiolns
hd 1:2:3:# ;;       // Should output 1
tl 1:2:3:# ;;       // Should output 2:3:#
hd # ;;             // Should output an error or a specific value that indicates an empty list
tl # ;;             // Same as above


if 1+1=2 then 5 else 6 ;;  // Should output 5

(\f.f 3) (\x.x+1) ;;  // Should output 4
(\x.\y.x+y) (\z.z*z) 5 ;; // Should output an abstraction waiting for another argument